#ifndef JUEGO_H
#define JUEGO_H
#include"jugador.h"
#include"enemigos.h"
#include "araña.h"
#include"fantasma.h"
#include"mapas.h"
#include <iostream>
#include<cctype>
#include<Windows.h>
#include<thread>
#include<chrono>
#include<conio.h>
#include"jugador2.h"
#include"deborador.h"

using namespace System;

class Juego {
public:
    Juego() : Jugador(MAX_WIDTH / 2, MAX_HEIGHT - 20) {
        //Enemigos.push_back(new Araña(10, 0, 10));
        Enemigos.push_back(new Fantasma(2, MAX_WIDTH - 13, 10));
        Enemigos.push_back(new Araña(2, 0, 7));
    }
    void gotoxy(int x, int y) {
        Console::SetCursorPosition(x, y);
    }
    void ajustarConsola() {
        HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        COORD size = { MAX_WIDTH, MAX_HEIGHT };
        SetConsoleScreenBufferSize(hConsole, size);
        SMALL_RECT rect = { 0, 0, MAX_WIDTH - 1, MAX_HEIGHT - 1 };
        SetConsoleWindowInfo(hConsole, TRUE, &rect);
    }
    void JugarNivel3() {
        system("cls");
        int mapa3[30][120]= { {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
                                                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4},
        };
        bool casaMaderaVisible = false;
        bool carreteraVisible = false;
        bool ArbolVisible = false;
        ocultarCursor();
        ajustarConsola();
        Console::BackgroundColor = ConsoleColor::Black;
        
        Mapas.dibujarMapa3();
        while (Jugador.estaViva()) {
            Console::BackgroundColor = ConsoleColor::Black;
            if (ArbolVisible) {
                Mapas.dibujarArbol();
            }
            if (casaMaderaVisible) {
                Mapas.dibujarCasaMadera();

           }
            if (carreteraVisible) {
                Mapas.dibujarCarretera();
           }
           
            if (Jugador.getX() == 110 && Jugador.getY() == 10) {
                casaMaderaVisible = true;
                ArbolVisible = true;
            }
            if (Jugador.getX() == 110 && Jugador.getY() == 1) {
                carreteraVisible = true;
            }

            Jugador.dibujar(3);
            int posicionx = Jugador.getX();
            int posicionY = Jugador.getY();
            Console::SetCursorPosition(0, 1);
            Console::ForegroundColor = ConsoleColor::DarkCyan;
            std::cout << "x: " << posicionx<<" y:"<<posicionY;
            _getch();
            if (_kbhit()) {
                int tecla = _getch();
                Jugador.mover(tecla, 3, mapa3);
            }

            

            Sleep(50);
        }

        system("cls"); // Limpia pantalla al morir
        ganaste();
        exit(0);
    }
    void jugarNivel2() {
        int mapa2 [30][120]= {
    {3,3,3,3,3,3,3,6,2,6,4,6,2,6,2,1,1,1,2,5,5,5,2,6,2,6,1,6,2,1,2,6,2,6,1,1,4,6,2,6,4,6,1,1,1,1,1,1,2,6,2,6,5,6,2,5,1,1,1,6,2,6,2,6,2,6,4,6,2,6,4,6,1,1,1,1,1,5,5,5,5,6,6,6,6,6,1,1,1,6,1,1,1,6,6,6,4,6,2,6,4,5,5,5,2,6,5,5,5,6,2,6,2,6,1,1,1,6,7,7},
    {3,3,3,3,3,3,3,2,6,2,4,1,1,1,1,1,8,1,6,5,8,5,5,5,5,2,1,1,1,1,1,1,1,1,1,1,4,2,6,2,4,2,1,8,1,8,1,8,1,2,6,5,5,2,5,5,1,8,1,1,1,1,6,2,6,2,4,2,6,2,4,1,1,1,1,8,1,5,8,5,5,5,5,5,5,6,1,8,1,6,1,8,1,5,5,5,4,2,6,2,4,5,8,5,5,5,5,8,5,1,1,1,1,1,1,8,1,2,7,7},
    {3,3,3,3,3,3,3,6,2,6,4,1,8,1,8,1,8,1,2,5,8,5,5,8,5,6,1,8,8,1,8,8,1,8,8,1,4,6,2,6,4,6,1,8,1,8,1,8,1,6,5,8,5,5,8,5,1,8,1,8,8,1,2,6,2,6,4,6,2,6,4,1,8,8,1,8,1,5,8,5,8,5,8,8,5,6,1,8,1,1,1,8,1,5,8,5,4,6,2,6,4,5,8,5,8,8,5,8,5,1,8,1,8,8,1,8,1,6,2,6},
    {3,3,3,3,3,3,3,2,6,2,4,1,1,1,1,1,1,1,6,5,5,5,5,5,5,2,1,1,1,1,1,1,1,1,1,1,4,2,6,2,4,2,1,1,1,1,1,1,1,2,5,5,5,5,5,5,1,1,1,1,1,1,6,2,6,2,4,2,6,2,4,1,1,1,1,1,1,5,5,5,5,5,5,5,5,6,1,1,1,1,1,1,1,5,5,5,4,2,6,2,4,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,2,6,2},
    {3,3,3,3,3,3,3,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
    {6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2},
    {2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6},
    {6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2},
    {4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
    {1,1,1,2,6,2,4,2,6,2,4,2,6,2,6,2,6,2,6,2,6,2,6,1,8,8,1,5,5,5,2,6,2,6,2,6,4,2,6,2,4,2,6,1,1,2,6,2,6,2,6,1,1,1,1,1,1,1,6,2,6,2,6,2,6,2,4,2,6,2,4,2,6,1,1,1,1,1,1,1,6,2,6,6,6,6,6,5,5,5,6,6,6,6,7,7,4,2,6,2,4,1,1,1,1,1,1,1,1,2,6,2,6,5,5,5,5,5,2,6},
    {1,8,1,6,2,6,4,6,2,6,4,6,2,6,2,6,2,6,2,6,2,6,2,1,1,1,1,5,8,5,6,2,6,2,6,2,4,6,2,6,4,6,6,1,1,6,2,7,7,6,2,1,8,8,1,8,8,1,2,6,2,6,2,6,2,6,4,6,2,6,4,6,1,8,8,8,1,8,8,1,2,6,5,5,5,5,5,5,8,5,5,5,5,6,7,7,4,6,2,6,4,1,8,1,8,1,8,1,1,1,1,1,2,5,8,5,8,5,5,5},
    {1,1,1,2,6,1,4,2,6,2,4,2,5,5,6,7,7,2,5,2,6,5,6,1,8,8,1,5,5,5,5,5,5,5,5,6,4,2,6,2,4,2,1,1,1,2,6,7,7,2,6,1,8,8,1,8,8,1,6,1,6,2,6,2,6,2,4,2,6,2,4,2,1,1,1,1,1,1,1,1,6,2,5,8,8,5,8,5,8,5,8,8,5,6,6,6,4,2,6,2,4,1,8,1,8,1,8,1,1,8,8,1,6,5,8,5,8,5,8,5},
    {1,8,1,1,1,1,4,6,2,6,4,5,8,8,5,7,7,6,5,5,2,5,5,1,1,1,1,5,8,5,8,8,5,8,5,2,4,6,2,6,4,6,1,8,1,5,5,5,5,5,2,1,1,1,1,1,1,1,2,1,1,6,1,6,2,6,4,6,2,6,4,6,2,6,2,6,2,5,5,5,2,6,5,5,5,5,5,5,5,5,5,5,5,6,6,6,4,6,2,6,4,1,1,1,1,1,1,1,1,1,1,1,2,5,5,5,5,5,5,5},
    {1,1,1,8,8,1,4,2,6,2,4,5,5,5,5,2,1,2,5,5,5,5,5,5,5,6,2,5,8,5,8,8,5,8,5,6,4,2,6,2,4,2,1,8,1,5,8,5,8,5,6,5,6,2,6,2,6,2,6,1,1,1,1,1,1,2,4,2,6,2,4,2,6,2,6,2,6,5,8,5,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,4,2,6,2,4,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2},
    {1,1,1,1,1,1,4,6,2,6,4,5,8,8,5,1,1,1,5,8,8,5,8,8,5,2,6,5,5,5,5,5,5,5,5,2,4,6,2,6,4,6,1,1,1,5,8,5,8,5,5,8,5,6,2,6,2,6,2,1,8,1,8,1,1,1,4,6,2,6,4,6,1,1,1,6,2,5,8,5,5,5,5,6,1,1,1,1,6,6,6,6,1,8,8,1,4,6,2,6,4,6,2,6,2,6,2,6,2,1,1,1,1,6,2,6,2,7,7,6},
    {5,2,6,5,6,2,4,2,6,2,4,5,5,5,5,1,8,1,5,5,5,5,5,5,5,1,1,6,7,7,2,6,1,6,2,6,4,2,6,2,4,2,1,1,1,5,5,5,5,5,5,8,5,2,6,5,5,2,6,1,8,1,8,1,8,1,4,2,6,2,4,2,1,8,1,2,6,5,8,5,5,8,5,6,1,8,8,1,6,7,7,6,1,1,1,1,4,2,6,2,4,5,5,5,6,2,5,5,5,1,8,8,1,2,6,2,6,7,7,2},
    {5,5,5,5,5,5,4,6,2,6,4,5,5,5,5,1,1,1,2,6,2,1,1,1,1,1,1,2,7,7,6,1,8,1,6,2,4,6,2,6,4,6,2,6,2,6,1,1,1,6,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,4,6,2,6,4,6,1,8,1,6,2,5,5,5,5,8,5,6,1,1,1,1,6,7,7,6,1,8,8,1,4,6,2,6,4,5,8,5,2,6,5,8,5,1,1,1,1,1,1,1,1,1,2,6},
    {8,5,8,5,8,5,4,2,6,2,4,1,1,1,1,1,8,1,6,2,6,1,8,8,1,8,1,6,2,6,1,1,1,1,1,6,4,2,6,2,4,2,6,1,1,1,1,8,1,2,5,8,5,5,8,8,5,8,5,2,6,2,6,2,6,2,4,2,6,2,4,2,1,1,1,1,1,1,1,1,5,5,5,6,1,8,8,1,1,1,1,1,1,1,1,1,4,2,6,2,4,5,8,5,5,5,5,8,5,1,8,8,1,8,1,8,8,1,6,2},
    {8,5,8,5,8,5,4,6,2,6,4,1,8,8,1,1,1,1,2,6,2,1,8,8,1,8,1,2,6,2,1,8,1,8,1,2,4,6,2,6,4,6,2,1,8,8,1,8,1,6,5,8,5,5,8,8,5,8,5,6,7,7,2,6,2,6,4,6,2,6,4,6,1,8,1,8,8,1,8,1,5,8,5,6,1,1,1,1,8,1,8,8,1,8,8,1,4,6,2,6,4,5,8,5,8,8,5,8,5,1,1,1,1,8,1,8,8,1,2,6},
    {5,5,5,5,5,5,4,2,6,2,4,1,1,1,1,1,1,1,6,2,6,1,1,1,1,1,1,6,2,6,1,1,1,1,1,6,4,2,6,2,4,2,6,1,1,1,1,1,1,2,5,5,5,5,5,5,5,5,5,2,7,7,6,2,6,2,4,2,6,2,4,2,1,1,1,1,1,1,1,1,5,5,5,6,1,1,1,1,1,1,1,1,1,1,1,1,4,2,6,2,4,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,6,2},
    {4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,2,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
    {6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2},
    {2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6},
    {6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2},
    {2,6,2,6,6,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6},
    {4,4,4,4,4,4,4,2,6,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,6,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,6,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,6,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
    {2,6,2,1,1,6,4,6,2,6,4,6,2,6,2,6,5,6,2,6,2,1,1,1,1,1,1,1,2,6,2,6,2,5,5,6,4,6,2,6,4,6,5,6,2,5,2,6,2,6,1,1,2,6,2,5,5,5,5,6,2,1,2,6,2,6,4,6,2,6,4,2,6,2,6,2,6,2,1,1,1,1,1,6,5,5,5,6,5,5,5,6,6,6,6,6,4,6,2,6,4,1,2,6,1,6,2,6,2,6,2,5,5,5,2,5,5,5,6,2},
    {1,1,1,1,1,1,4,2,6,2,4,5,5,5,5,5,5,2,6,2,6,1,8,1,8,1,8,1,6,5,5,5,5,5,5,6,4,2,6,2,4,2,5,5,6,5,5,2,6,2,1,1,1,1,1,5,8,8,5,1,1,1,6,2,6,2,4,2,6,2,4,6,1,1,1,1,1,1,1,8,1,8,1,2,5,8,5,6,5,8,5,5,5,5,5,6,4,2,6,2,4,1,1,1,1,1,1,1,6,2,6,5,8,5,6,5,8,5,2,6},
    {1,8,8,1,8,1,4,6,2,6,4,5,8,5,8,8,5,6,7,7,2,1,8,1,8,1,8,1,2,5,8,8,5,8,5,6,4,6,2,6,4,5,8,8,5,8,8,5,5,6,1,8,1,8,1,5,5,5,5,1,8,1,2,7,7,6,4,6,2,6,4,2,1,8,8,1,8,8,1,8,1,8,1,6,5,8,5,5,5,8,5,8,5,8,5,6,4,6,2,6,4,1,8,1,8,1,8,8,1,6,2,5,8,5,5,5,8,5,6,2},
    {1,1,1,1,1,1,4,2,6,2,4,5,5,5,5,5,5,2,7,7,6,1,1,1,1,1,1,1,6,5,5,5,5,5,5,6,4,2,6,2,4,5,5,5,5,5,5,5,5,2,1,1,1,1,1,5,5,5,5,1,1,1,6,7,7,2,4,2,6,2,4,6,1,1,1,1,1,1,1,1,1,1,1,2,5,5,5,5,5,5,5,5,5,5,5,6,4,2,6,2,4,1,1,1,1,1,1,1,1,2,6,5,5,5,5,5,5,5,2,6}
        };
        ocultarCursor();
        Mapas.dibujarMapa2();
        Console::BackgroundColor = ConsoleColor::Black;

        ajustarConsola();
        std::vector<Deborador> Deboradores = {
        Deborador(34, 5), Deborador(34, 20), Deborador(75, 6),
        Deborador(100, 4), Deborador(60, 21), Deborador(100, 22), Deborador(80, 23)
        };

        for (auto& Deborador : Deboradores) {
            Deborador.dibujar();
        }

        Jugador2 jugador2(2, 2);
        jugador2.dibujar();

        jugador2.mostrarVida();
        Console::ForegroundColor = ConsoleColor::DarkBlue;
        Console::SetCursorPosition(99, 25);
        std::cout << "Recolectados: " << jugador2.recolectados << "/10";

        Console::ForegroundColor = ConsoleColor::Green;
        Console::SetCursorPosition(99, 26);
        std::cout << "Bloque "<< (char)219<<" = 20  madera";

        Console::ForegroundColor = ConsoleColor::Magenta;
        Console::SetCursorPosition(99, 27);
        std::cout << "Bloque " << (char)219 << " = 20  piedra";

        Console::ForegroundColor = ConsoleColor::DarkCyan;
        Console::SetCursorPosition(99, 28);
        std::cout << "Bloque " << (char)219 << " = 20 metal";


        while (true) {
            for (auto& Deborador : Deboradores) {
                Deborador.mover();

                if (Deborador.x == jugador2.x && Deborador.y == jugador2.y) {
                    jugador2.perderVida();
                }
            }

            if (_kbhit()) {
                jugador2.mover();
            }
            if (jugador2.recolectados == 10) {
                system("cls");
                JugarNivel3();
            }

            Sleep(25);
        }
    }
    void jugarNivel() {
        int mapa1[30][120]= {
                        {7,7,3,3,3,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,7,7,3,3,3,7,7,3,3,3,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7},
                        {7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,7,7,7,7,3,7,7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,5,5,5,3,5,5,5,3,5,5,5,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2},
                        {7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,5,4,5,3,5,4,5,3,5,4,5,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2},
                        {7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,5,5,5,3,5,5,5,3,5,5,5,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2},
                        {7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,7,3,3,3,7,3,3,3,7,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2},
                        {7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,7,7,7,7,3,7,7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,7,2,2,2,2,2},
                        {1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2},
                        {1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2},
                        {1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7},
                        {7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,3,3,3,7,7,3,3,3,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,3,7,7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,3,3,3,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,5,5,5,3,5,5,5,3,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,5,4,5,3,5,4,5,3,5,4,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,3,7,7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,5,5,5,3,5,5,5,3,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,3},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,7,3,3,3,7,3,3,3,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7},
                        {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,1,1,7,7,7,1,1,7,7,7,1,1,7,7,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7},
                        {7,7,3,3,3,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7},
                        {7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7},
                        {7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,3,5,5,5,3,5,5,5,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7},
                        {7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,4,5,3,5,4,5,3,5,4,5,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7},
                        {7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,3,5,5,5,3,5,5,5,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7},
                        {7,7,7,3,7,7,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,3,3,3,7,3,3,3,7,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3},
                        {1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3},
                        {1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3},
                        {1,1,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,2,2,2,2,2,2,2,2,2,2,7,3,3,3,3,3,3,3,3,3,3,3,1,1,1,3},
                        {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7}

        };

        // Variables para contar los materiales recolectados
        int materiaPrimaRecolectada = 0;
        int arenaRecolectada = 0;
        const int totalMateriales = 4; // Total de materiales a recolectar

        // Posiciones de los materiales en el mapa
        std::vector<std::pair<int, int>> materiales = {
            {117, 11}, {10, 5}, {29, 5}, {70, 21} // Recursos seleccionados
        };

        ocultarCursor();
        ajustarConsola();
        Mapas.dibujarMapa1();

        // Dibujar los materiales en el mapa
        for (size_t i = 0; i < materiales.size(); ++i) {
            gotoxy(materiales[i].first, materiales[i].second);
            if (i < 2) {
                Console::ForegroundColor = ConsoleColor::Green; // Materia prima
                std::cout << "M";
            }
            else {
                Console::ForegroundColor = ConsoleColor::Yellow; // Arena
                std::cout << "A";
            }
        }

        while (Jugador.estaViva()) {
            Console::BackgroundColor = ConsoleColor::Black;

            // Mostrar los materiales recolectados
            Console::SetCursorPosition(0, 0);
            Console::ForegroundColor = ConsoleColor::White;
            std::cout << "Materia Prima: " << materiaPrimaRecolectada << " / 2";
            Console::SetCursorPosition(0, 1);
            std::cout << "Arena: " << arenaRecolectada << " / 2";
            Console::BackgroundColor = ConsoleColor::Black;
            Console::ForegroundColor = ConsoleColor::White;


            // Verificar colisión con materiales
            for (size_t i = 0; i < materiales.size(); ++i) {
                if (Jugador.getX() == materiales[i].first && Jugador.getY() == materiales[i].second) {
                    if (i < 2) {
                        materiaPrimaRecolectada++;
                    }
                    else {
                        arenaRecolectada++;
                    }

                    // Eliminar el material del mapa
                    gotoxy(materiales[i].first, materiales[i].second);
                    std::cout << " ";
                    materiales.erase(materiales.begin() + i);
                    break;
                }
            }

            // Verificar si se recolectaron todos los materiales
            if (materiaPrimaRecolectada + arenaRecolectada == totalMateriales) 
                {
                jugarNivel();
                ganaste();
				system("cls");
				exit(0);
            }

            // Mover al jugador
            if (_kbhit()) {
                int tecla = _getch();
                Jugador.mover(tecla, 1, mapa1);
            }

            // Mover enemigos y verificar colisiones
            for (auto* v : Enemigos) {
                v->mover();

                // Colisión con enemigos
                if (Jugador.getY() == v->getY() &&
                    Jugador.getX() >= v->getX() &&
                    Jugador.getX() < v->getX() + v->getLongitud()) {
                    if (v->chocar()) {
                        Jugador.perderVida();
                    }
                }
            }

            Sleep(50);
        }

        if (!Jugador.estaViva()) {
            system("cls"); // Limpia pantalla al morir
            perdiste();
            exit(0);
        }
    }
	~Juego() {
		for (auto* v : Enemigos)
			delete v;
	} 
	void run(); 
private:
    std:: vector<Deborador*> Deboradores;
	std::vector<Enemigos*> Enemigos;
	Jugador Jugador;
    Mapas Mapas;
	//       
    int madera = 0; // Contador de madera
    int piedra = 0; // Contador de piedra
    int metal = 0;  // Contador de metal
	void intro();
	void ocultarCursor();
    void creditos();
    void perdiste();
    void ganaste();
	void dibujoDragonEstatico();
	void menuPrincipal();
	void portadaEstaticaJuego();
	void pelotaAni1();
	void pelotaAni2();
	void pelotaAni3();
	void animacionPortada();	
	//void cargarJuego();
	//void nuevoJuego();
	void mostrarInstrucciones();
	void resaltarOpcionMenu(char* options, int pos_opx, int pos_opy, bool seleccion);
};
#endif /
